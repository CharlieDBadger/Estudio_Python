'''
HILOS / TRHEADS
Los hilos son una forma de simular la ejecución de multiples tareas de forma simultanea o concurrente.
En caso de ser simultanea, se ejecutan al mismo tiempo,
en caso de ser concurrente, se ejecutan al mismo tiempo pero de forma alternada.

- Procesos Consecutivos / Preparamos y horneamos 1 pizza -> Comemos 1 pizza
- Procesos Concurrentes / Preparamos 1 pizza mientras la otra se hornea -> Comemos 2 pizzas
- Procesos Simultaneos / Preparamos y horneamos ambas pizzas al mismo tiempo -> Comemos 2 pizzas
'''


'''
GIL: Global Interpreter Lock
Es un mutex(mecanismo de sincronización) implementado por defecto en Python,
este permite que solo un thread ejecute código Python a la vez.

INTERNING: Control de referencia de objetos.
Es una técnica de optimización en Python que almacena en caché y reutiliza objetos pequeños.
Python tiene una tabla de referencias de objetos, donde se almacenan los objetos y sus referencias.
Cuando se crea un objeto, Python busca en la tabla de referencias si ya existe un objeto igual.
a = "Cody"
b = "Cody"
a is b
>> True

Python hace un conteo por referencias de los objetos, si el conteo llega a 0, el objeto es eliminado de la memoria.

# Devuelve el conteo de referencias de un objeto.
sys.getrefcount(a)
>> 1

Cuando se elimina una referencia al objeto, se decrementa el conteo de referencias.

Cuando el conteo de referencias llega a 0, el objeto es eliminado de la memoria.
'''

'''
RACE CONDITION
Es un problema que se presenta cuando dos o más hilos de ejecución acceden a un recurso compartido,
como una variable, sin la sincronización adecuada.

PARA CONTROLAR EL PROBLEMA DE LA RACE CONDITION SE PUEDE UTILIZAR UNA CLASE LLAMADA LOCK
SACRIFICA RENDIMIENTO PORQUE BLOQUEA Y LIBERA EL RECURSO CADA VEZ QUE SE NECESITA ACCEDER A ÉL.
PERO, GARANTIZA QUE NO SE PRODUZCA EL ERROR MENCIONADO.

def deposit(self):
        for i in range(10_000_000):
            # lock.acquire() bloquea el recurso
            lock.acquire()
            self.balance += 1
            # lock.release() libera el recurso
            lock.release()
'''

'''
PROCESS
A diferencia de los THREADS, los PROCESOS son independientes entre sí,
estos si disponen de su propio espacio de memoria y uso de varios nucleos de forma simultanea.
'''

